domain Cryptarithm {
  Digit ::= {0..9}.
  Letter ::= {S, E, N, D, M, O, R, Y}.
  Assignment ::= new (letter: Letter, value: Digit).
  Sum ::= new (send: Integer, more: Integer, money: Integer).
  // Enforce S ≠ 0
  NoLeadingZeroS :- s is Assignment, s.letter = S, s.value != 0.
  // Enforce M ≠ 0
  NoLeadingZeroM :- m is Assignment, m.letter = M, m.value != 0.
  // Uniqueness constraint: all letter assignments must map to different digits
  AllUniqueAssignments :-
    a1 is Assignment, a2 is Assignment,
    a1.letter != a2.letter, a1.value != a2.value.
  Sum(snd, mre, mny) :-
    s is Assignment, s.letter = S,
    e is Assignment, e.letter = E,
    n is Assignment, n.letter = N,
    d is Assignment, d.letter = D,
    m is Assignment, m.letter = M,
    o is Assignment, o.letter = O,
    r is Assignment, r.letter = R,
    y is Assignment, y.letter = Y,
    snd = 1000 * s.value + 100 * e.value + 10 * n.value + d.value,
    mre = 1000 * m.value + 100 * o.value + 10 * r.value + e.value,
    mny = 10000 * m.value + 1000 * o.value + 100 * n.value + 10 * e.value + y.value.
  SumCorrect :-
    Sum(snd, mre, mny), snd + mre = mny.
  conforms NoLeadingZeroS, NoLeadingZeroM, AllUniqueAssignments, SumCorrect.
}
partial model pm of Cryptarithm {
  Assignment(letter, value).
}
